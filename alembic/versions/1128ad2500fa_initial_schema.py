"""initial schema

Revision ID: 1128ad2500fa
Revises: 
Create Date: 2025-04-30 22:33:25.662120

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql
import pgvector

# revision identifiers, used by Alembic.
revision: str = '1128ad2500fa'
down_revision: Union[str, None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    op.execute("CREATE EXTENSION IF NOT EXISTS vector;")
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('questions',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('parent_id', sa.UUID(), nullable=True),
    sa.Column('order', sa.Integer(), nullable=True),
    sa.Column('type', sa.String(), nullable=False),
    sa.Column('content', sa.JSON(), server_default='[]', nullable=False),
    sa.Column('options', sa.JSON(), server_default='[]', nullable=False),
    sa.Column('answers', sa.JSON(), server_default='{}', nullable=False),
    sa.Column('tags', postgresql.ARRAY(sa.String()), server_default='{}', nullable=False),
    sa.Column('difficulty', sa.Integer(), server_default='1', nullable=False),
    sa.Column('created_at', sa.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('source', sa.String(), nullable=True),
    sa.ForeignKeyConstraint(['parent_id'], ['questions.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_questions_parent_id'), 'questions', ['parent_id'], unique=False)
    op.create_index(op.f('ix_questions_type'), 'questions', ['type'], unique=False)
    op.create_table('users',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('google_id', sa.String(), nullable=True),
    sa.Column('email', sa.String(), nullable=False),
    sa.Column('name', sa.String(), nullable=True),
    sa.Column('password_hash', sa.String(), nullable=True),
    sa.Column('is_active', sa.Boolean(), nullable=True),
    sa.Column('created_at', sa.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.Column('updated_at', sa.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_users_email'), 'users', ['email'], unique=True)
    op.create_index(op.f('ix_users_google_id'), 'users', ['google_id'], unique=True)
    op.create_index(op.f('ix_users_id'), 'users', ['id'], unique=False)
    op.create_table('chat_logs',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('user_id', sa.UUID(), nullable=False),
    sa.Column('role', sa.String(), nullable=False),
    sa.Column('message', sa.String(), nullable=False),
    sa.Column('created_at', sa.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_chat_logs_id'), 'chat_logs', ['id'], unique=False)
    op.create_table('user_memory',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('user_id', sa.UUID(), nullable=False),
    sa.Column('message', sa.String(), nullable=False),
    sa.Column('embedding', pgvector.sqlalchemy.vector.VECTOR(dim=1536), nullable=False),
    sa.Column('type', sa.String(), nullable=True),
    sa.Column('source', sa.String(), nullable=True),
    sa.Column('importance', sa.Integer(), nullable=True),
    sa.Column('created_at', sa.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('user_profiles',
    sa.Column('user_id', sa.UUID(), nullable=False),
    sa.Column('country', sa.String(), nullable=True),
    sa.Column('exam', sa.String(), nullable=True),
    sa.Column('target_score', sa.Integer(), nullable=True),
    sa.Column('exam_date', sa.String(), nullable=True),
    sa.Column('previous_score', sa.Integer(), nullable=True),
    sa.Column('weekly_hours', sa.String(), nullable=True),
    sa.Column('preferred_times', sa.JSON(), nullable=True),
    sa.Column('onboarding_complete', sa.Boolean(), nullable=False),
    sa.Column('total_time', sa.Integer(), nullable=False),
    sa.Column('updated_at', sa.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('notify_mail', sa.Boolean(), nullable=False),
    sa.Column('notify_whatsapp', sa.Boolean(), nullable=False),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('user_id')
    )
    op.create_table('user_question_progress',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('user_id', sa.UUID(), nullable=False),
    sa.Column('question_id', sa.UUID(), nullable=False),
    sa.Column('is_correct', sa.Boolean(), nullable=False),
    sa.Column('answered_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.Column('time_taken', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['question_id'], ['questions.id'], ),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_user_question_progress_id'), 'user_question_progress', ['id'], unique=False)
    op.create_index(op.f('ix_user_question_progress_question_id'), 'user_question_progress', ['question_id'], unique=False)
    op.create_index(op.f('ix_user_question_progress_user_id'), 'user_question_progress', ['user_id'], unique=False)
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(op.f('ix_user_question_progress_user_id'), table_name='user_question_progress')
    op.drop_index(op.f('ix_user_question_progress_question_id'), table_name='user_question_progress')
    op.drop_index(op.f('ix_user_question_progress_id'), table_name='user_question_progress')
    op.drop_table('user_question_progress')
    op.drop_table('user_profiles')
    op.drop_table('user_memory')
    op.drop_index(op.f('ix_chat_logs_id'), table_name='chat_logs')
    op.drop_table('chat_logs')
    op.drop_index(op.f('ix_users_id'), table_name='users')
    op.drop_index(op.f('ix_users_google_id'), table_name='users')
    op.drop_index(op.f('ix_users_email'), table_name='users')
    op.drop_table('users')
    op.drop_index(op.f('ix_questions_type'), table_name='questions')
    op.drop_index(op.f('ix_questions_parent_id'), table_name='questions')
    op.drop_table('questions')
    op.execute("DROP EXTENSION IF EXISTS vector;")
    # ### end Alembic commands ###
